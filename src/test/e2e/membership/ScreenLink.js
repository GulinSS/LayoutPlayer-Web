// Generated by CoffeeScript 1.4.0
var casper;

casper = require('casper').create({
  pageSettings: {
    clientScripts: ['jquery.simulate.js'],
    loadImages: true,
    loadPlugins: false
  }
});

casper.on('remote.message', function(msg) {
  return this.echo('remote message caught: ' + msg);
});

casper.start("http://localhost:3333/sections/membership/#/1/1", function() {
  this.capture('sections.membership.screenLink.png');
  return this.test.comment('ScreenLink');
});

casper.then(function() {
  this.test.assertExists('#layout', 'there is the main element');
  this.test.assertExists('#layout #img_layout #img_wrap img', 'there is the image');
  return this.test.assertExists('#layout #img_layout #img_wrap #links', 'there is the links area');
});

casper.then(function() {
  var result;
  result = this.evaluate(function() {
    var $img, beforeTest, hideSelection, selectRect, simulateDrag, testSelection;
    beforeTest = $('#links a.mark').length;
    simulateDrag = function($element, source, destination) {
      $element.simulate('mousedown', source);
      $(document).simulate('mousemove', destination);
      $(document).simulate('mousemove', destination);
      return $element.simulate('mouseup', source);
    };
    selectRect = function($element, sideSize, padding) {
      var destination, offset, source;
      offset = $element.offset();
      source = {
        clientX: offset.left - $(document).scrollLeft() + padding,
        clientY: offset.top - $(document).scrollTop() + padding
      };
      destination = {
        clientX: source.clientX + sideSize,
        clientY: source.clientY + sideSize
      };
      return simulateDrag($element, source, destination);
    };
    testSelection = function($element) {
      return selectRect($element, 50, 1);
    };
    hideSelection = function($element) {
      return selectRect($element, 0, 80);
    };
    /*
        $('img').one 'load', ->
          $img = $ 'img'
          testSelection $img
          hideSelection $img
    */

    $img = $('img');
    testSelection($img);
    return beforeTest < $('#links a.mark').length;
  });
  this.capture('sections.membership.screenLink2.png');
  return this.test.assertTruthy(result, 'after simulation link count must be incremented');
});

casper.then(function() {
  this.test.assertExists('#selectionOptions', 'there is the selection options area must be present');
  this.test.assertExists('form select[name=slideId]', 'there is the slide selection must be present');
  this.test.assertExists('.btn.btn-primary i.icon-ok', 'Ok button must be present');
  this.test.assertExists('.btn.btn-danger i.icon-ban-circle', 'Cancel button must be present');
  this.test.assertVisible('.imgareaselect-outer', 'Resizable area must be visible after drag');
  try {
    this.fill('form', {
      slideId: 0
    }, false);
  } catch (e) {
    this.test.fail('failed to fill form');
  }
  try {
    return this.click('.btn.btn-primary i.icon-ok');
  } catch (e) {
    return this.test.fail('failed to send form');
  }
});

casper.then(function() {
  try {
    this.click('a.mark');
  } catch (e) {
    this.test.fail('failed to click on already added link');
  }
  this.test.assertExists('#selectionOptions', 'there is the selection options area must be present for editing after click');
  try {
    return this.click('.btn.btn-primary i.icon-ok');
  } catch (e) {
    return this.test.fail('failed to save changes');
  }
});

casper.then(function() {
  var result;
  result = this.evaluate(function() {
    var e, lastPath;
    lastPath = window.location.pathname;
    e = jQuery.Event('click');
    e.ctrlKey = true;
    $('a.mark').trigger(e);
    return lastPath !== window.location.pathname;
  });
  return this.test.assertTruthy(result, 'Ctrl + Click on the link must redirect to other slide');
});

casper.back();

casper.then(function() {
  try {
    this.click('a.mark');
  } catch (e) {
    this.test.fail('failed to click on already added link');
  }
  try {
    this.click('.btn.btn-danger i.icon-ban-circle');
  } catch (e) {
    this.test.fail('failed to delete link');
  }
  return this.test.assertDoesntExist('a.mark', 'Any links must no exists after delete');
});

casper.then(function() {
  return this.test.done();
});

casper.run();
